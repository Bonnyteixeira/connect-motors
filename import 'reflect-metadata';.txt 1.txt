import 'reflect-metadata';
import express, { Request, Response } from 'express';
import dotenv from 'dotenv';
import helmet from 'helmet';
import cors from 'cors';
import 'express-async-errors';
import { AppDataSource } from './data-source';
import { registerRoutes } from './routes';
import { errorHandler } from './middleware/errorHandler';

dotenv.config();

const PORT = process.env.PORT || 4000;

async function bootstrap() {
  try {
    await AppDataSource.initialize();
    console.log('✅ Database connected successfully');
    await createDefaultOwner();
  } catch (error: any) {
    console.error('❌ Database connection failed:', error.message);
    if (process.env.NODE_ENV === 'production') process.exit(1);
  }

  const app = express();

  app.use(helmet());
  app.use(cors({ origin: process.env.CORS_ORIGIN || 'http://localhost:5173', credentials: true }));
  app.use(express.json({ limit: '10mb' }));
  app.use(express.urlencoded({ extended: true }));

  app.get('/health', (req: Request, res: Response) => res.json({ status: 'ok' }));

  registerRoutes(app);

  app.use(errorHandler);

  app.use('*', (req: Request, res: Response) => res.status(404).json({ error: 'Route not found' }));

  app.listen(PORT, () => console.log(`🚀 Backend running on port ${PORT}`));
}

async function createDefaultOwner() {
  const userRepository = AppDataSource.getRepository('User');
  const existingOwner = await userRepository.findOne({ where: { email: 'owner@connectmotors.com', tenantId: 'corporate' } });
  if (!existingOwner) {
    const bcrypt = require('bcrypt');
    const hashedPassword = await bcrypt.hash('Admin@123', 10);
    const owner = userRepository.create({
      email: 'owner@connectmotors.com',
      password: hashedPassword,
      name: 'Proprietário Connect Motors',
      role: 'owner',
      tenantId: 'corporate',
      isActive: true,
      department: 'Executive',
      permissions: ['all']
    });
    await userRepository.save(owner);
    console.log('✅ Default owner user created');
  }
}

bootstrap().catch(error => { console.error('💥 Failed to start application:', error); process.exit(1); });
